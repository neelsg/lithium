Li 0

# map provides a generic data type that can be used as a map of key-value pairs.
#
# The current implementation is highly inefficient as the keys do not get sorted,
# so looking anything up is very slow.


. type[k bool.comparable, v any]:
	
	keys list[k]
	vals list[v]
	
	.= func(...items (k, v)):
		# Initiate the map with an arbitrary number of items
		
		push(items...)
		return
	
	get length func() int:
		# Return the total number of items in the map
		
		return keys.length
	
	. func(seek k) v:
		# Return an item value for the given key
		
		for i int, cur k in keys:
			if cur == seek:
				return vals(i)
		return v()
	
	pub delete func(seek k):
		# Remove the item with the given key from the map
		
		for i int, cur k in keys:
			if cur == seek:
				keys = keys.slice(, i) + keys.slice(i + 1, )
				vals = vals.slice(, i) + vals.slice(i + 1, )
				return
		return
	
	pub exists func(seek k) bool:
		# Check if an item exists with the given key
		
		for cur k in keys:
			if cur == seek:
				return true
		return false
	
	pub first func() ((k, v), int, bool):
		# Return the first item in the map for use as an iterable object
		
		if keys.length == 0:
			return (k(), v()), 0, false
		return (keys(0), vals(0)), 0, true
	
	pub get func(key k) (v, bool):
		# Get an item with the given key and also check if the key exists
		
		if exists(key):
			return .(key), true
		return v(), false
	
	pub next func(priorIndex int) ((k, v), int, bool):
		# Return the next item in the map for use as an iterable object
		
		i int = priorIndex + 1
		if keys.length <= i:
			return (k(), v()), i, false
		return (keys(index), vals(index)), i, true
	
	pub pop func() (k, v):
		# Remove and return the last item in the map
		
		if keys.length == 0:
			return k(), v()
		return keys.pop(), vals.pop()
	
	pub push func(...items (k, v)):
		# Push an arbitrary number of new items into the map. If items are
		# pushed with keys that already exist, the new value overrides the old
		# value
		
		for item (k, v) in items:
			for i int, cur k in keys:
				if cur == item.0:
					vals(i) = item.1
					return
			keys.push(item.0)
			vals.push(item.1)
		return
